using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SoloLearn
{
    class Program
    {
        static void Main(string[] args)
        {

            // Displaying Output
            Console.WriteLine("Hello World!");

            // Displaying Output
            int x = 89;
            Console.WriteLine(x);
            x = 10;
            double y = 20;
            Console.WriteLine("x = {0}; y = {1}", x, y);

            //output "C# is cool"
            Console.WriteLine("C# is cool");

            //Area of a circle
            const double pi = 3.14;
            double radius;
            //your code goes here
            radius = Convert.ToDouble(Console.ReadLine());
            double area = pi * radius * radius;
            Console.WriteLine(area);

            //Multiple of 3
            int number = Convert.ToInt32(Console.ReadLine());
            //your code goes here
            int N;
            N = number;
            for (int i = 1; i <= N; i++)
            {
                if (i % 3 == 0)
                {
                    Console.Write("*");
                }
                else
                {
                    Console.Write(i);
                }
            }

            //Level Points

            int levels = Convert.ToInt32(Console.ReadLine());
            Console.WriteLine(Points(levels));

            //Words

            string[] words = {
                "home",
                "programming",
                "victory",
                "C#",
                "football",
                "sport",
                "book",
                "learn",
                "dream",
                "fun"
            };
            string letter = Console.ReadLine();
            int count = 0;
            //your code goes here
            int y = 1;
            while (count < 9)
            {
                if (words[count].Contains(letter))
                {
                    Console.WriteLine(words[count]);
                    y += count;
                }
                count++;
            }
            if (y == 0 || y == 1)
            {
                Console.WriteLine("No match");
            }

            //Social Network

            string postText = Console.ReadLine();
            Post post = new Post();
            post.Text = postText;
            post.ShowPost();

            //Dance

            string name1 = Console.ReadLine();
            int points1 = Convert.ToInt32(Console.ReadLine());
            string name2 = Console.ReadLine();
            int points2 = Convert.ToInt32(Console.ReadLine());
            DancerPoints dancer1 = new DancerPoints(name1, points1);
            DancerPoints dancer2 = new DancerPoints(name2, points2);
            DancerPoints total = dancer1 + dancer2;
            Console.WriteLine(total.name);
            Console.WriteLine(total.points);

            //Drawing Application

            Draw pencil = new Draw();
            Draw brush = new Brush();
            Draw spray = new Spray();
            pencil.StartDraw();
            brush.StartDraw();
            spray.StartDraw();

            //Robot Barmen

            try
            {
                int drinks = Convert.ToInt32(Console.ReadLine());
                int shelves = Convert.ToInt32(Console.ReadLine());

                //your code goes here
                Console.WriteLine(drinks / shelves);
            }
            /*
             * 1. DivideByZeroException => "At least 1 shelf"
             * 2. FormatException => "Please insert an integer"
            */
            catch (DivideByZeroException)
            {
                Console.WriteLine("At least 1 shelf");
            }
            catch (FormatException)
            {
                Console.WriteLine("Please insert an integer");
            }

            //Coffee Time

            int discount = Convert.ToInt32(Console.ReadLine());
            Dictionary<string, int> coffee = new Dictionary<string, int>();
            coffee.Add("Americano", 50);
            coffee.Add("Latte", 70);
            coffee.Add("Flat White", 60);
            coffee.Add("Espresso", 60);
            coffee.Add("Cappuccino", 80);
            coffee.Add("Mocha", 90);
            //your code goes here
            foreach (KeyValuePair<string, int> entry in coffee)
            {
                Console.WriteLine(entry.Key + ": " + (entry.Value - entry.Value * discount / 100));
            }
        }

        static int Points(int levels)
        {
            //your code goes here
            int sum = 0;
            for (int i = 1; i <= levels; i++)
            {
                sum = sum + i;
            }
            return sum;
        }
        class DancerPoints
        {
            public string name;
            public int points;
            public DancerPoints(string name, int points)
            {
                this.name = name;
                this.points = points;
            }

            //overload the + operator
            public static DancerPoints operator +(DancerPoints a, DancerPoints b)
            {
                string name = a.name + " " + "&" + " " + b.name;
                int points = a.points + b.points;
                DancerPoints total = new DancerPoints(name, points);
                return total;
            }

            /*
            Draw => "Using pencil"
            Brush => "Using brush"
            Spray => "Using spray"
            */
            public interface IDraw
            {
                void StartDraw();
            }

            class Draw : IDraw
            {
                public virtual void StartDraw()
                {
                    Console.WriteLine("Using pencil");
                }
            }

            //inherit this class from the class Draw
            class Brush : Draw
            {
                //implement the StartDraw() method
                public override void StartDraw()
                {
                    Console.WriteLine("Using brush");
                }
            }

            //inherit this class from the class Draw
            class Spray : Draw
            {
                //implement the StartDraw() method
                public override void StartDraw()
                {
                    Console.WriteLine("Using spray");
                }
            }
        }
        class Post
        {
            private string text;
            //write a constructor here
            public Post()
            {
                Console.WriteLine("New post");
            }

            public void ShowPost()
            {
                Console.WriteLine(text);
            }
            //write a property for member text
            public string Text
            {
                get { return text; }
                set { text = value; }
            }
        }
    }
}
